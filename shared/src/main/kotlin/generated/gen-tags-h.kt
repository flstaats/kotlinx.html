package kotlinx.html

import kotlinx.html.*
import kotlinx.html.impl.*
import kotlinx.html.attributes.*

/*******************************************************************************
    DO NOT EDIT
    This file was generated by module generate
*******************************************************************************/

@Suppress("unused")
open class H1(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("h1", consumer, initialAttributes, null, false, false), HtmlInlineTag {

}

@Suppress("unused")
open class H2(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("h2", consumer, initialAttributes, null, false, false), HtmlInlineTag {

}

@Suppress("unused")
open class H3(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("h3", consumer, initialAttributes, null, false, false), HtmlInlineTag {

}

@Suppress("unused")
open class H4(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("h4", consumer, initialAttributes, null, false, false), HtmlInlineTag {

}

@Suppress("unused")
open class H5(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("h5", consumer, initialAttributes, null, false, false), HtmlInlineTag {

}

@Suppress("unused")
open class H6(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("h6", consumer, initialAttributes, null, false, false), HtmlInlineTag {

}

@Suppress("unused")
open class HEAD(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("head", consumer, initialAttributes, null, false, false), HtmlHeadTag {

}

@Suppress("unused")
open class HEADER(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("header", consumer, initialAttributes, null, false, false), HtmlBlockTag {

}

@Suppress("unused")
open class HGROUP(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("hgroup", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacade {

}
fun HGROUP.h1(classes : String? = null, block : H1.() -> Unit = {}) : Unit = consumer.instance("H1", { H1(attributesMapOf("class", classes), consumer) }).visit(block)

fun HGROUP.h2(classes : String? = null, block : H2.() -> Unit = {}) : Unit = consumer.instance("H2", { H2(attributesMapOf("class", classes), consumer) }).visit(block)

fun HGROUP.h3(classes : String? = null, block : H3.() -> Unit = {}) : Unit = consumer.instance("H3", { H3(attributesMapOf("class", classes), consumer) }).visit(block)

fun HGROUP.h4(classes : String? = null, block : H4.() -> Unit = {}) : Unit = consumer.instance("H4", { H4(attributesMapOf("class", classes), consumer) }).visit(block)

fun HGROUP.h5(classes : String? = null, block : H5.() -> Unit = {}) : Unit = consumer.instance("H5", { H5(attributesMapOf("class", classes), consumer) }).visit(block)

fun HGROUP.h6(classes : String? = null, block : H6.() -> Unit = {}) : Unit = consumer.instance("H6", { H6(attributesMapOf("class", classes), consumer) }).visit(block)


@Suppress("unused")
open class HR(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("hr", consumer, initialAttributes, null, false, true), CommonAttributeGroupFacade {

}

@Suppress("unused")
open class HTML(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("html", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacade {
    var manifest : String
        get()  = attributeStringString.get(this, "manifest")
        set(newValue) {attributeStringString.set(this, "manifest", newValue)}


}
fun HTML.body(classes : String? = null, block : BODY.() -> Unit = {}) : Unit = consumer.instance("BODY", { BODY(attributesMapOf("class", classes), consumer) }).visit(block)

fun HTML.head(block : HEAD.() -> Unit = {}) : Unit = consumer.instance("HEAD", { HEAD(emptyMap, consumer) }).visit(block)


