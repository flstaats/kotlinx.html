package kotlinx.html

import kotlinx.html.*
import kotlinx.html.impl.*
import kotlinx.html.attributes.*

/*******************************************************************************
    DO NOT EDIT
    This file was generated by module generate
*******************************************************************************/

@Suppress("unused")
open class SAMP(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("samp", consumer, initialAttributes, null, true, false), HtmlInlineTag {

}

@Suppress("unused")
open class SCRIPT(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("script", consumer, initialAttributes, null, false, false) {
    var charset : String
        get()  = attributeStringString.get(this, "charset")
        set(newValue) {attributeStringString.set(this, "charset", newValue)}

    var type : ScriptType
        get()  = attributeScriptTypeEnumScriptTypeValues.get(this, "type")
        set(newValue) {attributeScriptTypeEnumScriptTypeValues.set(this, "type", newValue)}

    var src : String
        get()  = attributeStringString.get(this, "src")
        set(newValue) {attributeStringString.set(this, "src", newValue)}

    var defer : Boolean
        get()  = attributeBooleanTicker.get(this, "defer")
        set(newValue) {attributeBooleanTicker.set(this, "defer", newValue)}

    var async : Boolean
        get()  = attributeBooleanTicker.get(this, "async")
        set(newValue) {attributeBooleanTicker.set(this, "async", newValue)}


}

@Suppress("unused")
open class SECTION(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("section", consumer, initialAttributes, null, false, false), HtmlBlockTag {

}

@Suppress("unused")
open class SELECT(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("select", consumer, initialAttributes, null, true, false), CommonAttributeGroupFacade {
    var autoFocus : Boolean
        get()  = attributeBooleanTicker.get(this, "autofocus")
        set(newValue) {attributeBooleanTicker.set(this, "autofocus", newValue)}

    var disabled : Boolean
        get()  = attributeBooleanTicker.get(this, "disabled")
        set(newValue) {attributeBooleanTicker.set(this, "disabled", newValue)}

    var form : String
        get()  = attributeStringString.get(this, "form")
        set(newValue) {attributeStringString.set(this, "form", newValue)}

    var multiple : Boolean
        get()  = attributeBooleanTicker.get(this, "multiple")
        set(newValue) {attributeBooleanTicker.set(this, "multiple", newValue)}

    var name : String
        get()  = attributeStringString.get(this, "name")
        set(newValue) {attributeStringString.set(this, "name", newValue)}

    var size : String
        get()  = attributeStringString.get(this, "size")
        set(newValue) {attributeStringString.set(this, "size", newValue)}

    var required : Boolean
        get()  = attributeBooleanTicker.get(this, "required")
        set(newValue) {attributeBooleanTicker.set(this, "required", newValue)}


}
fun SELECT.option(classes : String? = null, block : OPTION.() -> Unit = {}) : Unit = consumer.instance("OPTION", { OPTION(attributesMapOf("class", classes), consumer) }).visit(block)
fun SELECT.option(classes : String? = null, content : String = "") : Unit = consumer.instance("OPTION", { OPTION(attributesMapOf("class", classes), consumer) }).visit({+content})

fun SELECT.optGroup(label : String? = null, classes : String? = null, block : OPTGROUP.() -> Unit = {}) : Unit = consumer.instance("OPTGROUP", { OPTGROUP(attributesMapOf("label", label,"class", classes), consumer) }).visit(block)


@Suppress("unused")
open class SMALL(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("small", consumer, initialAttributes, null, true, false), HtmlInlineTag {

}

@Suppress("unused")
open class SOURCE(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("source", consumer, initialAttributes, null, true, true), CommonAttributeGroupFacade {
    var src : String
        get()  = attributeStringString.get(this, "src")
        set(newValue) {attributeStringString.set(this, "src", newValue)}

    var type : String
        get()  = attributeStringString.get(this, "type")
        set(newValue) {attributeStringString.set(this, "type", newValue)}

    var media : String
        get()  = attributeStringString.get(this, "media")
        set(newValue) {attributeStringString.set(this, "media", newValue)}


}

@Suppress("unused")
open class SPAN(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("span", consumer, initialAttributes, null, true, false), HtmlInlineTag {

}

@Suppress("unused")
open class STRONG(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("strong", consumer, initialAttributes, null, true, false), HtmlInlineTag {

}

@Suppress("unused")
open class STYLE(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("style", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacade {
    var type : String
        get()  = attributeStringString.get(this, "type")
        set(newValue) {attributeStringString.set(this, "type", newValue)}

    var media : String
        get()  = attributeStringString.get(this, "media")
        set(newValue) {attributeStringString.set(this, "media", newValue)}

    var scoped : Boolean
        get()  = attributeBooleanTicker.get(this, "scoped")
        set(newValue) {attributeBooleanTicker.set(this, "scoped", newValue)}


}

@Suppress("unused")
open class SUB(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("sub", consumer, initialAttributes, null, true, false), HtmlInlineTag {

}

@Suppress("unused")
open class SUP(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("sup", consumer, initialAttributes, null, true, false), HtmlInlineTag {

}

@Suppress("unused")
open class SVG(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("svg", consumer, initialAttributes, "http://www.w3.org/2000/svg", false, false), CommonAttributeGroupFacade {

}

