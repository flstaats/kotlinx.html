package kotlinx.html

import kotlinx.html.*
import kotlinx.html.impl.*
import kotlinx.html.attributes.*

/*******************************************************************************
    DO NOT EDIT
    This file was generated by module generate
*******************************************************************************/

interface FlowContent : Tag {
}

interface HeadingContent : Tag {
}

interface InteractiveContent : Tag {
}

interface MetaDataContent : Tag {
}

interface PhrasingContent : Tag {
}

interface SectioningContent : Tag {
}

fun FlowContent.a(href : String? = null, target : String? = null, classes : String? = null, block : A.() -> Unit = {}) : Unit = consumer.instance("A", { A(attributesMapOf("href", href,"target", target,"class", classes), consumer) }).visit(block)

fun FlowContent.abbr(classes : String? = null, block : ABBR.() -> Unit = {}) : Unit = consumer.instance("ABBR", { ABBR(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.area(shape : AreaShape? = null, alt : String? = null, classes : String? = null, block : AREA.() -> Unit = {}) : Unit = consumer.instance("AREA", { AREA(attributesMapOf("Shape", shape?.enumEncode(),"alt", alt,"class", classes), consumer) }).visit(block)
fun FlowContent.rectArea(alt : String? = null, classes : String? = null, block : AREA.() -> Unit = {}) : Unit = AREA(attributesMapOf("Shape", AreaShape.rect.realValue,"alt", alt,"class", classes), consumer).visit(block)
fun FlowContent.circleArea(alt : String? = null, classes : String? = null, block : AREA.() -> Unit = {}) : Unit = AREA(attributesMapOf("Shape", AreaShape.circle.realValue,"alt", alt,"class", classes), consumer).visit(block)
fun FlowContent.polyArea(alt : String? = null, classes : String? = null, block : AREA.() -> Unit = {}) : Unit = AREA(attributesMapOf("Shape", AreaShape.poly.realValue,"alt", alt,"class", classes), consumer).visit(block)
fun FlowContent.defaultArea(alt : String? = null, classes : String? = null, block : AREA.() -> Unit = {}) : Unit = AREA(attributesMapOf("Shape", AreaShape.default.realValue,"alt", alt,"class", classes), consumer).visit(block)

fun FlowContent.address(classes : String? = null, block : ADDRESS.() -> Unit = {}) : Unit = consumer.instance("ADDRESS", { ADDRESS(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.article(classes : String? = null, block : ARTICLE.() -> Unit = {}) : Unit = consumer.instance("ARTICLE", { ARTICLE(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.aside(classes : String? = null, block : ASIDE.() -> Unit = {}) : Unit = consumer.instance("ASIDE", { ASIDE(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.audio(classes : String? = null, block : AUDIO.() -> Unit = {}) : Unit = consumer.instance("AUDIO", { AUDIO(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.b(classes : String? = null, block : B.() -> Unit = {}) : Unit = consumer.instance("B", { B(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.bdi(classes : String? = null, block : BDI.() -> Unit = {}) : Unit = consumer.instance("BDI", { BDI(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.blockQuote(classes : String? = null, block : BLOCKQUOTE.() -> Unit = {}) : Unit = consumer.instance("BLOCKQUOTE", { BLOCKQUOTE(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.bdo(classes : String? = null, block : BDO.() -> Unit = {}) : Unit = consumer.instance("BDO", { BDO(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.br(classes : String? = null, block : BR.() -> Unit = {}) : Unit = consumer.instance("BR", { BR(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.button(formEncType : ButtonFormEncType? = null, formMethod : ButtonFormMethod? = null, type : ButtonType? = null, classes : String? = null, block : BUTTON.() -> Unit = {}) : Unit = consumer.instance("BUTTON", { BUTTON(attributesMapOf("formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"type", type?.enumEncode(),"class", classes), consumer) }).visit(block)
fun FlowContent.getButton(formEncType : ButtonFormEncType? = null, type : ButtonType? = null, classes : String? = null, block : BUTTON.() -> Unit = {}) : Unit = BUTTON(attributesMapOf("formenctype", formEncType?.enumEncode(),"formmethod", ButtonFormMethod.get.realValue,"type", type?.enumEncode(),"class", classes), consumer).visit(block)
fun FlowContent.postButton(formEncType : ButtonFormEncType? = null, type : ButtonType? = null, classes : String? = null, block : BUTTON.() -> Unit = {}) : Unit = BUTTON(attributesMapOf("formenctype", formEncType?.enumEncode(),"formmethod", ButtonFormMethod.post.realValue,"type", type?.enumEncode(),"class", classes), consumer).visit(block)
fun FlowContent.putButton(formEncType : ButtonFormEncType? = null, type : ButtonType? = null, classes : String? = null, block : BUTTON.() -> Unit = {}) : Unit = BUTTON(attributesMapOf("formenctype", formEncType?.enumEncode(),"formmethod", ButtonFormMethod.put.realValue,"type", type?.enumEncode(),"class", classes), consumer).visit(block)
fun FlowContent.deleteButton(formEncType : ButtonFormEncType? = null, type : ButtonType? = null, classes : String? = null, block : BUTTON.() -> Unit = {}) : Unit = BUTTON(attributesMapOf("formenctype", formEncType?.enumEncode(),"formmethod", ButtonFormMethod.delete.realValue,"type", type?.enumEncode(),"class", classes), consumer).visit(block)

fun FlowContent.canvas(classes : String? = null, block : CANVAS.() -> Unit = {}) : Unit = consumer.instance("CANVAS", { CANVAS(attributesMapOf("class", classes), consumer) }).visit(block)
fun FlowContent.canvas(classes : String? = null, content : String = "") : Unit = consumer.instance("CANVAS", { CANVAS(attributesMapOf("class", classes), consumer) }).visit({+content})

fun FlowContent.cite(classes : String? = null, block : CITE.() -> Unit = {}) : Unit = consumer.instance("CITE", { CITE(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.code(classes : String? = null, block : CODE.() -> Unit = {}) : Unit = consumer.instance("CODE", { CODE(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.command(type : CommandType? = null, classes : String? = null, block : COMMAND.() -> Unit = {}) : Unit = consumer.instance("COMMAND", { COMMAND(attributesMapOf("type", type?.enumEncode(),"class", classes), consumer) }).visit(block)
fun FlowContent.commandCommand(classes : String? = null, block : COMMAND.() -> Unit = {}) : Unit = COMMAND(attributesMapOf("type", CommandType.command.realValue,"class", classes), consumer).visit(block)
fun FlowContent.checkBoxCommand(classes : String? = null, block : COMMAND.() -> Unit = {}) : Unit = COMMAND(attributesMapOf("type", CommandType.checkBox.realValue,"class", classes), consumer).visit(block)
fun FlowContent.radioCommand(classes : String? = null, block : COMMAND.() -> Unit = {}) : Unit = COMMAND(attributesMapOf("type", CommandType.radio.realValue,"class", classes), consumer).visit(block)

fun FlowContent.dataList(classes : String? = null, block : DATALIST.() -> Unit = {}) : Unit = consumer.instance("DATALIST", { DATALIST(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.del(classes : String? = null, block : DEL.() -> Unit = {}) : Unit = consumer.instance("DEL", { DEL(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.details(classes : String? = null, block : DETAILS.() -> Unit = {}) : Unit = consumer.instance("DETAILS", { DETAILS(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.dfn(classes : String? = null, block : DFN.() -> Unit = {}) : Unit = consumer.instance("DFN", { DFN(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.dialog(classes : String? = null, block : DIALOG.() -> Unit = {}) : Unit = consumer.instance("DIALOG", { DIALOG(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.div(classes : String? = null, block : DIV.() -> Unit = {}) : Unit = consumer.instance("DIV", { DIV(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.dl(classes : String? = null, block : DL.() -> Unit = {}) : Unit = consumer.instance("DL", { DL(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.em(classes : String? = null, block : EM.() -> Unit = {}) : Unit = consumer.instance("EM", { EM(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.embed(classes : String? = null, block : EMBED.() -> Unit = {}) : Unit = consumer.instance("EMBED", { EMBED(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.fieldSet(classes : String? = null, block : FIELDSET.() -> Unit = {}) : Unit = consumer.instance("FIELDSET", { FIELDSET(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.figure(classes : String? = null, block : FIGURE.() -> Unit = {}) : Unit = consumer.instance("FIGURE", { FIGURE(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.figcaption(classes : String? = null, block : FIGCAPTION.() -> Unit = {}) : Unit = consumer.instance("FIGCAPTION", { FIGCAPTION(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.footer(classes : String? = null, block : FOOTER.() -> Unit = {}) : Unit = consumer.instance("FOOTER", { FOOTER(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.form(action : String? = null, encType : FormEncType? = null, method : FormMethod? = null, classes : String? = null, block : FORM.() -> Unit = {}) : Unit = consumer.instance("FORM", { FORM(attributesMapOf("action", action,"enctype", encType?.enumEncode(),"method", method?.enumEncode(),"class", classes), consumer) }).visit(block)
fun FlowContent.getForm(action : String? = null, encType : FormEncType? = null, classes : String? = null, block : FORM.() -> Unit = {}) : Unit = FORM(attributesMapOf("action", action,"enctype", encType?.enumEncode(),"method", FormMethod.get.realValue,"class", classes), consumer).visit(block)
fun FlowContent.postForm(action : String? = null, encType : FormEncType? = null, classes : String? = null, block : FORM.() -> Unit = {}) : Unit = FORM(attributesMapOf("action", action,"enctype", encType?.enumEncode(),"method", FormMethod.post.realValue,"class", classes), consumer).visit(block)
fun FlowContent.putForm(action : String? = null, encType : FormEncType? = null, classes : String? = null, block : FORM.() -> Unit = {}) : Unit = FORM(attributesMapOf("action", action,"enctype", encType?.enumEncode(),"method", FormMethod.put.realValue,"class", classes), consumer).visit(block)
fun FlowContent.deleteForm(action : String? = null, encType : FormEncType? = null, classes : String? = null, block : FORM.() -> Unit = {}) : Unit = FORM(attributesMapOf("action", action,"enctype", encType?.enumEncode(),"method", FormMethod.delete.realValue,"class", classes), consumer).visit(block)

fun FlowContent.h1(classes : String? = null, block : H1.() -> Unit = {}) : Unit = consumer.instance("H1", { H1(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.h2(classes : String? = null, block : H2.() -> Unit = {}) : Unit = consumer.instance("H2", { H2(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.h3(classes : String? = null, block : H3.() -> Unit = {}) : Unit = consumer.instance("H3", { H3(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.h4(classes : String? = null, block : H4.() -> Unit = {}) : Unit = consumer.instance("H4", { H4(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.h5(classes : String? = null, block : H5.() -> Unit = {}) : Unit = consumer.instance("H5", { H5(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.h6(classes : String? = null, block : H6.() -> Unit = {}) : Unit = consumer.instance("H6", { H6(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.header(classes : String? = null, block : HEADER.() -> Unit = {}) : Unit = consumer.instance("HEADER", { HEADER(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.hGroup(classes : String? = null, block : HGROUP.() -> Unit = {}) : Unit = consumer.instance("HGROUP", { HGROUP(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.hr(classes : String? = null, block : HR.() -> Unit = {}) : Unit = consumer.instance("HR", { HR(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.i(classes : String? = null, block : I.() -> Unit = {}) : Unit = consumer.instance("I", { I(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.iframe(sandbox : IframeSandbox? = null, classes : String? = null, block : IFRAME.() -> Unit = {}) : Unit = consumer.instance("IFRAME", { IFRAME(attributesMapOf("sandbox", sandbox?.enumEncode(),"class", classes), consumer) }).visit(block)
fun FlowContent.iframe(sandbox : IframeSandbox? = null, classes : String? = null, content : String = "") : Unit = consumer.instance("IFRAME", { IFRAME(attributesMapOf("sandbox", sandbox?.enumEncode(),"class", classes), consumer) }).visit({+content})
fun FlowContent.allowSameOriginIframe(classes : String? = null, block : IFRAME.() -> Unit = {}) : Unit = IFRAME(attributesMapOf("sandbox", IframeSandbox.allowSameOrigin.realValue,"class", classes), consumer).visit(block)
fun FlowContent.allowFormSIframe(classes : String? = null, block : IFRAME.() -> Unit = {}) : Unit = IFRAME(attributesMapOf("sandbox", IframeSandbox.allowFormS.realValue,"class", classes), consumer).visit(block)
fun FlowContent.allowScriptsIframe(classes : String? = null, block : IFRAME.() -> Unit = {}) : Unit = IFRAME(attributesMapOf("sandbox", IframeSandbox.allowScripts.realValue,"class", classes), consumer).visit(block)
fun FlowContent.allowSameOriginIframe(classes : String? = null, content : String = "") : Unit = IFRAME(attributesMapOf("sandbox", IframeSandbox.allowSameOrigin.realValue,"class", classes), consumer).visit({+content})
fun FlowContent.allowFormSIframe(classes : String? = null, content : String = "") : Unit = IFRAME(attributesMapOf("sandbox", IframeSandbox.allowFormS.realValue,"class", classes), consumer).visit({+content})
fun FlowContent.allowScriptsIframe(classes : String? = null, content : String = "") : Unit = IFRAME(attributesMapOf("sandbox", IframeSandbox.allowScripts.realValue,"class", classes), consumer).visit({+content})

fun FlowContent.img(alt : String? = null, src : String? = null, classes : String? = null, block : IMG.() -> Unit = {}) : Unit = consumer.instance("IMG", { IMG(attributesMapOf("alt", alt,"src", src,"class", classes), consumer) }).visit(block)

fun FlowContent.input(type : InputType? = null, formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = consumer.instance("INPUT", { INPUT(attributesMapOf("type", type?.enumEncode(),"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer) }).visit(block)
fun FlowContent.buttonInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.button.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun FlowContent.checkBoxInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.checkBox.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun FlowContent.colorInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.color.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun FlowContent.dateInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.date.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun FlowContent.dateTimeInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.dateTime.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun FlowContent.dateTimeLocalInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.dateTimeLocal.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun FlowContent.emailInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.email.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun FlowContent.fileInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.file.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun FlowContent.hiddenInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.hidden.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun FlowContent.imageInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.image.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun FlowContent.monthInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.month.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun FlowContent.numberInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.number.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun FlowContent.passwordInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.password.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun FlowContent.radioInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.radio.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun FlowContent.rangeInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.range.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun FlowContent.resetInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.reset.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun FlowContent.searchInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.search.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun FlowContent.submitInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.submit.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun FlowContent.textInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.text.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun FlowContent.telInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.tel.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun FlowContent.timeInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.time.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun FlowContent.urlInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.url.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun FlowContent.weekInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.week.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)

fun FlowContent.ins(classes : String? = null, block : INS.() -> Unit = {}) : Unit = consumer.instance("INS", { INS(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.kbd(classes : String? = null, block : KBD.() -> Unit = {}) : Unit = consumer.instance("KBD", { KBD(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.keyGen(keyType : KeyGenKeyType? = null, classes : String? = null, block : KEYGEN.() -> Unit = {}) : Unit = consumer.instance("KEYGEN", { KEYGEN(attributesMapOf("keytype", keyType?.enumEncode(),"class", classes), consumer) }).visit(block)
fun FlowContent.rsaKeyGen(classes : String? = null, block : KEYGEN.() -> Unit = {}) : Unit = KEYGEN(attributesMapOf("keytype", KeyGenKeyType.rsa.realValue,"class", classes), consumer).visit(block)

fun FlowContent.label(classes : String? = null, block : LABEL.() -> Unit = {}) : Unit = consumer.instance("LABEL", { LABEL(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.link(href : String? = null, rel : String? = null, type : String? = null, block : LINK.() -> Unit = {}) : Unit = consumer.instance("LINK", { LINK(attributesMapOf("href", href,"rel", rel,"type", type), consumer) }).visit(block)

fun FlowContent.map(name : String? = null, classes : String? = null, block : MAP.() -> Unit = {}) : Unit = consumer.instance("MAP", { MAP(attributesMapOf("name", name,"class", classes), consumer) }).visit(block)

fun FlowContent.mark(classes : String? = null, block : MARK.() -> Unit = {}) : Unit = consumer.instance("MARK", { MARK(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.math(classes : String? = null, block : MATH.() -> Unit = {}) : Unit = consumer.instance("MATH", { MATH(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.meta(name : String? = null, content : String? = null, block : META.() -> Unit = {}) : Unit = consumer.instance("META", { META(attributesMapOf("name", name,"content", content), consumer) }).visit(block)

fun FlowContent.meter(classes : String? = null, block : METER.() -> Unit = {}) : Unit = consumer.instance("METER", { METER(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.nav(classes : String? = null, block : NAV.() -> Unit = {}) : Unit = consumer.instance("NAV", { NAV(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.noScript(classes : String? = null, block : NOSCRIPT.() -> Unit = {}) : Unit = consumer.instance("NOSCRIPT", { NOSCRIPT(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.ol(classes : String? = null, block : OL.() -> Unit = {}) : Unit = consumer.instance("OL", { OL(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.object_(classes : String? = null, block : OBJECT_.() -> Unit = {}) : Unit = consumer.instance("OBJECT_", { OBJECT_(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.output(classes : String? = null, block : OUTPUT.() -> Unit = {}) : Unit = consumer.instance("OUTPUT", { OUTPUT(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.p(classes : String? = null, block : P.() -> Unit = {}) : Unit = consumer.instance("P", { P(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.pre(classes : String? = null, block : PRE.() -> Unit = {}) : Unit = consumer.instance("PRE", { PRE(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.progress(classes : String? = null, block : PROGRESS.() -> Unit = {}) : Unit = consumer.instance("PROGRESS", { PROGRESS(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.q(classes : String? = null, block : Q.() -> Unit = {}) : Unit = consumer.instance("Q", { Q(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.ruby(classes : String? = null, block : RUBY.() -> Unit = {}) : Unit = consumer.instance("RUBY", { RUBY(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.samp(classes : String? = null, block : SAMP.() -> Unit = {}) : Unit = consumer.instance("SAMP", { SAMP(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.script(type : ScriptType? = null, src : String? = null, block : SCRIPT.() -> Unit = {}) : Unit = consumer.instance("SCRIPT", { SCRIPT(attributesMapOf("type", type?.enumEncode(),"src", src), consumer) }).visit(block)
fun FlowContent.textEcmaScriptScript(src : String? = null, block : SCRIPT.() -> Unit = {}) : Unit = SCRIPT(attributesMapOf("type", ScriptType.textEcmaScript.realValue,"src", src), consumer).visit(block)
fun FlowContent.textJavaScriptScript(src : String? = null, block : SCRIPT.() -> Unit = {}) : Unit = SCRIPT(attributesMapOf("type", ScriptType.textJavaScript.realValue,"src", src), consumer).visit(block)
fun FlowContent.textJavaScript10Script(src : String? = null, block : SCRIPT.() -> Unit = {}) : Unit = SCRIPT(attributesMapOf("type", ScriptType.textJavaScript10.realValue,"src", src), consumer).visit(block)
fun FlowContent.textJavaScript11Script(src : String? = null, block : SCRIPT.() -> Unit = {}) : Unit = SCRIPT(attributesMapOf("type", ScriptType.textJavaScript11.realValue,"src", src), consumer).visit(block)
fun FlowContent.textJavaScript12Script(src : String? = null, block : SCRIPT.() -> Unit = {}) : Unit = SCRIPT(attributesMapOf("type", ScriptType.textJavaScript12.realValue,"src", src), consumer).visit(block)
fun FlowContent.textJavaScript13Script(src : String? = null, block : SCRIPT.() -> Unit = {}) : Unit = SCRIPT(attributesMapOf("type", ScriptType.textJavaScript13.realValue,"src", src), consumer).visit(block)
fun FlowContent.textJavaScript14Script(src : String? = null, block : SCRIPT.() -> Unit = {}) : Unit = SCRIPT(attributesMapOf("type", ScriptType.textJavaScript14.realValue,"src", src), consumer).visit(block)
fun FlowContent.textJavaScript15Script(src : String? = null, block : SCRIPT.() -> Unit = {}) : Unit = SCRIPT(attributesMapOf("type", ScriptType.textJavaScript15.realValue,"src", src), consumer).visit(block)
fun FlowContent.textJScriptScript(src : String? = null, block : SCRIPT.() -> Unit = {}) : Unit = SCRIPT(attributesMapOf("type", ScriptType.textJScript.realValue,"src", src), consumer).visit(block)
fun FlowContent.textXJavaScriptScript(src : String? = null, block : SCRIPT.() -> Unit = {}) : Unit = SCRIPT(attributesMapOf("type", ScriptType.textXJavaScript.realValue,"src", src), consumer).visit(block)
fun FlowContent.textXEcmaScriptScript(src : String? = null, block : SCRIPT.() -> Unit = {}) : Unit = SCRIPT(attributesMapOf("type", ScriptType.textXEcmaScript.realValue,"src", src), consumer).visit(block)
fun FlowContent.textVbScriptScript(src : String? = null, block : SCRIPT.() -> Unit = {}) : Unit = SCRIPT(attributesMapOf("type", ScriptType.textVbScript.realValue,"src", src), consumer).visit(block)

fun FlowContent.section(classes : String? = null, block : SECTION.() -> Unit = {}) : Unit = consumer.instance("SECTION", { SECTION(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.select(classes : String? = null, block : SELECT.() -> Unit = {}) : Unit = consumer.instance("SELECT", { SELECT(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.small(classes : String? = null, block : SMALL.() -> Unit = {}) : Unit = consumer.instance("SMALL", { SMALL(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.span(classes : String? = null, block : SPAN.() -> Unit = {}) : Unit = consumer.instance("SPAN", { SPAN(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.strong(classes : String? = null, block : STRONG.() -> Unit = {}) : Unit = consumer.instance("STRONG", { STRONG(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.style(type : String? = null, block : STYLE.() -> Unit = {}) : Unit = consumer.instance("STYLE", { STYLE(attributesMapOf("type", type), consumer) }).visit(block)
fun FlowContent.style(type : String? = null, content : String = "") : Unit = consumer.instance("STYLE", { STYLE(attributesMapOf("type", type), consumer) }).visit({+content})

fun FlowContent.sub(classes : String? = null, block : SUB.() -> Unit = {}) : Unit = consumer.instance("SUB", { SUB(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.sup(classes : String? = null, block : SUP.() -> Unit = {}) : Unit = consumer.instance("SUP", { SUP(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.svg(classes : String? = null, block : SVG.() -> Unit = {}) : Unit = consumer.instance("SVG", { SVG(attributesMapOf("class", classes), consumer) }).visit(block)
fun FlowContent.svg(classes : String? = null, content : String = "") : Unit = consumer.instance("SVG", { SVG(attributesMapOf("class", classes), consumer) }).visit({+content})

fun FlowContent.table(classes : String? = null, block : TABLE.() -> Unit = {}) : Unit = consumer.instance("TABLE", { TABLE(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.textArea(rows : String? = null, cols : String? = null, wrap : TextAreaWrap? = null, classes : String? = null, block : TEXTAREA.() -> Unit = {}) : Unit = consumer.instance("TEXTAREA", { TEXTAREA(attributesMapOf("rows", rows,"cols", cols,"wrap", wrap?.enumEncode(),"class", classes), consumer) }).visit(block)
fun FlowContent.textArea(rows : String? = null, cols : String? = null, wrap : TextAreaWrap? = null, classes : String? = null, content : String = "") : Unit = consumer.instance("TEXTAREA", { TEXTAREA(attributesMapOf("rows", rows,"cols", cols,"wrap", wrap?.enumEncode(),"class", classes), consumer) }).visit({+content})
fun FlowContent.hardTextArea(rows : String? = null, cols : String? = null, classes : String? = null, block : TEXTAREA.() -> Unit = {}) : Unit = TEXTAREA(attributesMapOf("rows", rows,"cols", cols,"wrap", TextAreaWrap.hard.realValue,"class", classes), consumer).visit(block)
fun FlowContent.softTextArea(rows : String? = null, cols : String? = null, classes : String? = null, block : TEXTAREA.() -> Unit = {}) : Unit = TEXTAREA(attributesMapOf("rows", rows,"cols", cols,"wrap", TextAreaWrap.soft.realValue,"class", classes), consumer).visit(block)
fun FlowContent.hardTextArea(rows : String? = null, cols : String? = null, classes : String? = null, content : String = "") : Unit = TEXTAREA(attributesMapOf("rows", rows,"cols", cols,"wrap", TextAreaWrap.hard.realValue,"class", classes), consumer).visit({+content})
fun FlowContent.softTextArea(rows : String? = null, cols : String? = null, classes : String? = null, content : String = "") : Unit = TEXTAREA(attributesMapOf("rows", rows,"cols", cols,"wrap", TextAreaWrap.soft.realValue,"class", classes), consumer).visit({+content})

fun FlowContent.time(classes : String? = null, block : TIME.() -> Unit = {}) : Unit = consumer.instance("TIME", { TIME(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.ul(classes : String? = null, block : UL.() -> Unit = {}) : Unit = consumer.instance("UL", { UL(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.var_(classes : String? = null, block : VAR_.() -> Unit = {}) : Unit = consumer.instance("VAR_", { VAR_(attributesMapOf("class", classes), consumer) }).visit(block)

fun FlowContent.video(classes : String? = null, block : VIDEO.() -> Unit = {}) : Unit = consumer.instance("VIDEO", { VIDEO(attributesMapOf("class", classes), consumer) }).visit(block)

fun HeadingContent.h1(classes : String? = null, block : H1.() -> Unit = {}) : Unit = consumer.instance("H1", { H1(attributesMapOf("class", classes), consumer) }).visit(block)

fun HeadingContent.h2(classes : String? = null, block : H2.() -> Unit = {}) : Unit = consumer.instance("H2", { H2(attributesMapOf("class", classes), consumer) }).visit(block)

fun HeadingContent.h3(classes : String? = null, block : H3.() -> Unit = {}) : Unit = consumer.instance("H3", { H3(attributesMapOf("class", classes), consumer) }).visit(block)

fun HeadingContent.h4(classes : String? = null, block : H4.() -> Unit = {}) : Unit = consumer.instance("H4", { H4(attributesMapOf("class", classes), consumer) }).visit(block)

fun HeadingContent.h5(classes : String? = null, block : H5.() -> Unit = {}) : Unit = consumer.instance("H5", { H5(attributesMapOf("class", classes), consumer) }).visit(block)

fun HeadingContent.h6(classes : String? = null, block : H6.() -> Unit = {}) : Unit = consumer.instance("H6", { H6(attributesMapOf("class", classes), consumer) }).visit(block)

fun HeadingContent.hGroup(classes : String? = null, block : HGROUP.() -> Unit = {}) : Unit = consumer.instance("HGROUP", { HGROUP(attributesMapOf("class", classes), consumer) }).visit(block)

fun InteractiveContent.a(href : String? = null, target : String? = null, classes : String? = null, block : A.() -> Unit = {}) : Unit = consumer.instance("A", { A(attributesMapOf("href", href,"target", target,"class", classes), consumer) }).visit(block)

fun InteractiveContent.audio(classes : String? = null, block : AUDIO.() -> Unit = {}) : Unit = consumer.instance("AUDIO", { AUDIO(attributesMapOf("class", classes), consumer) }).visit(block)

fun InteractiveContent.button(formEncType : ButtonFormEncType? = null, formMethod : ButtonFormMethod? = null, type : ButtonType? = null, classes : String? = null, block : BUTTON.() -> Unit = {}) : Unit = consumer.instance("BUTTON", { BUTTON(attributesMapOf("formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"type", type?.enumEncode(),"class", classes), consumer) }).visit(block)
fun InteractiveContent.getButton(formEncType : ButtonFormEncType? = null, type : ButtonType? = null, classes : String? = null, block : BUTTON.() -> Unit = {}) : Unit = BUTTON(attributesMapOf("formenctype", formEncType?.enumEncode(),"formmethod", ButtonFormMethod.get.realValue,"type", type?.enumEncode(),"class", classes), consumer).visit(block)
fun InteractiveContent.postButton(formEncType : ButtonFormEncType? = null, type : ButtonType? = null, classes : String? = null, block : BUTTON.() -> Unit = {}) : Unit = BUTTON(attributesMapOf("formenctype", formEncType?.enumEncode(),"formmethod", ButtonFormMethod.post.realValue,"type", type?.enumEncode(),"class", classes), consumer).visit(block)
fun InteractiveContent.putButton(formEncType : ButtonFormEncType? = null, type : ButtonType? = null, classes : String? = null, block : BUTTON.() -> Unit = {}) : Unit = BUTTON(attributesMapOf("formenctype", formEncType?.enumEncode(),"formmethod", ButtonFormMethod.put.realValue,"type", type?.enumEncode(),"class", classes), consumer).visit(block)
fun InteractiveContent.deleteButton(formEncType : ButtonFormEncType? = null, type : ButtonType? = null, classes : String? = null, block : BUTTON.() -> Unit = {}) : Unit = BUTTON(attributesMapOf("formenctype", formEncType?.enumEncode(),"formmethod", ButtonFormMethod.delete.realValue,"type", type?.enumEncode(),"class", classes), consumer).visit(block)

fun InteractiveContent.details(classes : String? = null, block : DETAILS.() -> Unit = {}) : Unit = consumer.instance("DETAILS", { DETAILS(attributesMapOf("class", classes), consumer) }).visit(block)

fun InteractiveContent.embed(classes : String? = null, block : EMBED.() -> Unit = {}) : Unit = consumer.instance("EMBED", { EMBED(attributesMapOf("class", classes), consumer) }).visit(block)

fun InteractiveContent.iframe(sandbox : IframeSandbox? = null, classes : String? = null, block : IFRAME.() -> Unit = {}) : Unit = consumer.instance("IFRAME", { IFRAME(attributesMapOf("sandbox", sandbox?.enumEncode(),"class", classes), consumer) }).visit(block)
fun InteractiveContent.iframe(sandbox : IframeSandbox? = null, classes : String? = null, content : String = "") : Unit = consumer.instance("IFRAME", { IFRAME(attributesMapOf("sandbox", sandbox?.enumEncode(),"class", classes), consumer) }).visit({+content})
fun InteractiveContent.allowSameOriginIframe(classes : String? = null, block : IFRAME.() -> Unit = {}) : Unit = IFRAME(attributesMapOf("sandbox", IframeSandbox.allowSameOrigin.realValue,"class", classes), consumer).visit(block)
fun InteractiveContent.allowFormSIframe(classes : String? = null, block : IFRAME.() -> Unit = {}) : Unit = IFRAME(attributesMapOf("sandbox", IframeSandbox.allowFormS.realValue,"class", classes), consumer).visit(block)
fun InteractiveContent.allowScriptsIframe(classes : String? = null, block : IFRAME.() -> Unit = {}) : Unit = IFRAME(attributesMapOf("sandbox", IframeSandbox.allowScripts.realValue,"class", classes), consumer).visit(block)
fun InteractiveContent.allowSameOriginIframe(classes : String? = null, content : String = "") : Unit = IFRAME(attributesMapOf("sandbox", IframeSandbox.allowSameOrigin.realValue,"class", classes), consumer).visit({+content})
fun InteractiveContent.allowFormSIframe(classes : String? = null, content : String = "") : Unit = IFRAME(attributesMapOf("sandbox", IframeSandbox.allowFormS.realValue,"class", classes), consumer).visit({+content})
fun InteractiveContent.allowScriptsIframe(classes : String? = null, content : String = "") : Unit = IFRAME(attributesMapOf("sandbox", IframeSandbox.allowScripts.realValue,"class", classes), consumer).visit({+content})

fun InteractiveContent.img(alt : String? = null, src : String? = null, classes : String? = null, block : IMG.() -> Unit = {}) : Unit = consumer.instance("IMG", { IMG(attributesMapOf("alt", alt,"src", src,"class", classes), consumer) }).visit(block)

fun InteractiveContent.input(type : InputType? = null, formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = consumer.instance("INPUT", { INPUT(attributesMapOf("type", type?.enumEncode(),"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer) }).visit(block)
fun InteractiveContent.buttonInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.button.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun InteractiveContent.checkBoxInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.checkBox.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun InteractiveContent.colorInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.color.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun InteractiveContent.dateInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.date.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun InteractiveContent.dateTimeInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.dateTime.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun InteractiveContent.dateTimeLocalInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.dateTimeLocal.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun InteractiveContent.emailInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.email.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun InteractiveContent.fileInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.file.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun InteractiveContent.hiddenInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.hidden.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun InteractiveContent.imageInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.image.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun InteractiveContent.monthInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.month.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun InteractiveContent.numberInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.number.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun InteractiveContent.passwordInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.password.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun InteractiveContent.radioInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.radio.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun InteractiveContent.rangeInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.range.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun InteractiveContent.resetInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.reset.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun InteractiveContent.searchInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.search.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun InteractiveContent.submitInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.submit.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun InteractiveContent.textInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.text.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun InteractiveContent.telInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.tel.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun InteractiveContent.timeInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.time.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun InteractiveContent.urlInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.url.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun InteractiveContent.weekInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.week.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)

fun InteractiveContent.keyGen(keyType : KeyGenKeyType? = null, classes : String? = null, block : KEYGEN.() -> Unit = {}) : Unit = consumer.instance("KEYGEN", { KEYGEN(attributesMapOf("keytype", keyType?.enumEncode(),"class", classes), consumer) }).visit(block)
fun InteractiveContent.rsaKeyGen(classes : String? = null, block : KEYGEN.() -> Unit = {}) : Unit = KEYGEN(attributesMapOf("keytype", KeyGenKeyType.rsa.realValue,"class", classes), consumer).visit(block)

fun InteractiveContent.label(classes : String? = null, block : LABEL.() -> Unit = {}) : Unit = consumer.instance("LABEL", { LABEL(attributesMapOf("class", classes), consumer) }).visit(block)

fun InteractiveContent.object_(classes : String? = null, block : OBJECT_.() -> Unit = {}) : Unit = consumer.instance("OBJECT_", { OBJECT_(attributesMapOf("class", classes), consumer) }).visit(block)

fun InteractiveContent.select(classes : String? = null, block : SELECT.() -> Unit = {}) : Unit = consumer.instance("SELECT", { SELECT(attributesMapOf("class", classes), consumer) }).visit(block)

fun InteractiveContent.textArea(rows : String? = null, cols : String? = null, wrap : TextAreaWrap? = null, classes : String? = null, block : TEXTAREA.() -> Unit = {}) : Unit = consumer.instance("TEXTAREA", { TEXTAREA(attributesMapOf("rows", rows,"cols", cols,"wrap", wrap?.enumEncode(),"class", classes), consumer) }).visit(block)
fun InteractiveContent.textArea(rows : String? = null, cols : String? = null, wrap : TextAreaWrap? = null, classes : String? = null, content : String = "") : Unit = consumer.instance("TEXTAREA", { TEXTAREA(attributesMapOf("rows", rows,"cols", cols,"wrap", wrap?.enumEncode(),"class", classes), consumer) }).visit({+content})
fun InteractiveContent.hardTextArea(rows : String? = null, cols : String? = null, classes : String? = null, block : TEXTAREA.() -> Unit = {}) : Unit = TEXTAREA(attributesMapOf("rows", rows,"cols", cols,"wrap", TextAreaWrap.hard.realValue,"class", classes), consumer).visit(block)
fun InteractiveContent.softTextArea(rows : String? = null, cols : String? = null, classes : String? = null, block : TEXTAREA.() -> Unit = {}) : Unit = TEXTAREA(attributesMapOf("rows", rows,"cols", cols,"wrap", TextAreaWrap.soft.realValue,"class", classes), consumer).visit(block)
fun InteractiveContent.hardTextArea(rows : String? = null, cols : String? = null, classes : String? = null, content : String = "") : Unit = TEXTAREA(attributesMapOf("rows", rows,"cols", cols,"wrap", TextAreaWrap.hard.realValue,"class", classes), consumer).visit({+content})
fun InteractiveContent.softTextArea(rows : String? = null, cols : String? = null, classes : String? = null, content : String = "") : Unit = TEXTAREA(attributesMapOf("rows", rows,"cols", cols,"wrap", TextAreaWrap.soft.realValue,"class", classes), consumer).visit({+content})

fun InteractiveContent.video(classes : String? = null, block : VIDEO.() -> Unit = {}) : Unit = consumer.instance("VIDEO", { VIDEO(attributesMapOf("class", classes), consumer) }).visit(block)

fun MetaDataContent.base(classes : String? = null, block : BASE.() -> Unit = {}) : Unit = consumer.instance("BASE", { BASE(attributesMapOf("class", classes), consumer) }).visit(block)

fun MetaDataContent.command(type : CommandType? = null, classes : String? = null, block : COMMAND.() -> Unit = {}) : Unit = consumer.instance("COMMAND", { COMMAND(attributesMapOf("type", type?.enumEncode(),"class", classes), consumer) }).visit(block)
fun MetaDataContent.commandCommand(classes : String? = null, block : COMMAND.() -> Unit = {}) : Unit = COMMAND(attributesMapOf("type", CommandType.command.realValue,"class", classes), consumer).visit(block)
fun MetaDataContent.checkBoxCommand(classes : String? = null, block : COMMAND.() -> Unit = {}) : Unit = COMMAND(attributesMapOf("type", CommandType.checkBox.realValue,"class", classes), consumer).visit(block)
fun MetaDataContent.radioCommand(classes : String? = null, block : COMMAND.() -> Unit = {}) : Unit = COMMAND(attributesMapOf("type", CommandType.radio.realValue,"class", classes), consumer).visit(block)

fun MetaDataContent.link(href : String? = null, rel : String? = null, type : String? = null, block : LINK.() -> Unit = {}) : Unit = consumer.instance("LINK", { LINK(attributesMapOf("href", href,"rel", rel,"type", type), consumer) }).visit(block)

fun MetaDataContent.meta(name : String? = null, content : String? = null, block : META.() -> Unit = {}) : Unit = consumer.instance("META", { META(attributesMapOf("name", name,"content", content), consumer) }).visit(block)

fun MetaDataContent.noScript(classes : String? = null, block : NOSCRIPT.() -> Unit = {}) : Unit = consumer.instance("NOSCRIPT", { NOSCRIPT(attributesMapOf("class", classes), consumer) }).visit(block)

fun MetaDataContent.script(type : ScriptType? = null, src : String? = null, block : SCRIPT.() -> Unit = {}) : Unit = consumer.instance("SCRIPT", { SCRIPT(attributesMapOf("type", type?.enumEncode(),"src", src), consumer) }).visit(block)
fun MetaDataContent.textEcmaScriptScript(src : String? = null, block : SCRIPT.() -> Unit = {}) : Unit = SCRIPT(attributesMapOf("type", ScriptType.textEcmaScript.realValue,"src", src), consumer).visit(block)
fun MetaDataContent.textJavaScriptScript(src : String? = null, block : SCRIPT.() -> Unit = {}) : Unit = SCRIPT(attributesMapOf("type", ScriptType.textJavaScript.realValue,"src", src), consumer).visit(block)
fun MetaDataContent.textJavaScript10Script(src : String? = null, block : SCRIPT.() -> Unit = {}) : Unit = SCRIPT(attributesMapOf("type", ScriptType.textJavaScript10.realValue,"src", src), consumer).visit(block)
fun MetaDataContent.textJavaScript11Script(src : String? = null, block : SCRIPT.() -> Unit = {}) : Unit = SCRIPT(attributesMapOf("type", ScriptType.textJavaScript11.realValue,"src", src), consumer).visit(block)
fun MetaDataContent.textJavaScript12Script(src : String? = null, block : SCRIPT.() -> Unit = {}) : Unit = SCRIPT(attributesMapOf("type", ScriptType.textJavaScript12.realValue,"src", src), consumer).visit(block)
fun MetaDataContent.textJavaScript13Script(src : String? = null, block : SCRIPT.() -> Unit = {}) : Unit = SCRIPT(attributesMapOf("type", ScriptType.textJavaScript13.realValue,"src", src), consumer).visit(block)
fun MetaDataContent.textJavaScript14Script(src : String? = null, block : SCRIPT.() -> Unit = {}) : Unit = SCRIPT(attributesMapOf("type", ScriptType.textJavaScript14.realValue,"src", src), consumer).visit(block)
fun MetaDataContent.textJavaScript15Script(src : String? = null, block : SCRIPT.() -> Unit = {}) : Unit = SCRIPT(attributesMapOf("type", ScriptType.textJavaScript15.realValue,"src", src), consumer).visit(block)
fun MetaDataContent.textJScriptScript(src : String? = null, block : SCRIPT.() -> Unit = {}) : Unit = SCRIPT(attributesMapOf("type", ScriptType.textJScript.realValue,"src", src), consumer).visit(block)
fun MetaDataContent.textXJavaScriptScript(src : String? = null, block : SCRIPT.() -> Unit = {}) : Unit = SCRIPT(attributesMapOf("type", ScriptType.textXJavaScript.realValue,"src", src), consumer).visit(block)
fun MetaDataContent.textXEcmaScriptScript(src : String? = null, block : SCRIPT.() -> Unit = {}) : Unit = SCRIPT(attributesMapOf("type", ScriptType.textXEcmaScript.realValue,"src", src), consumer).visit(block)
fun MetaDataContent.textVbScriptScript(src : String? = null, block : SCRIPT.() -> Unit = {}) : Unit = SCRIPT(attributesMapOf("type", ScriptType.textVbScript.realValue,"src", src), consumer).visit(block)

fun MetaDataContent.style(type : String? = null, block : STYLE.() -> Unit = {}) : Unit = consumer.instance("STYLE", { STYLE(attributesMapOf("type", type), consumer) }).visit(block)
fun MetaDataContent.style(type : String? = null, content : String = "") : Unit = consumer.instance("STYLE", { STYLE(attributesMapOf("type", type), consumer) }).visit({+content})

fun MetaDataContent.title(block : TITLE.() -> Unit = {}) : Unit = consumer.instance("TITLE", { TITLE(emptyMap, consumer) }).visit(block)
fun MetaDataContent.title(content : String = "") : Unit = consumer.instance("TITLE", { TITLE(emptyMap, consumer) }).visit({+content})

fun PhrasingContent.a(href : String? = null, target : String? = null, classes : String? = null, block : A.() -> Unit = {}) : Unit = consumer.instance("A", { A(attributesMapOf("href", href,"target", target,"class", classes), consumer) }).visit(block)

fun PhrasingContent.abbr(classes : String? = null, block : ABBR.() -> Unit = {}) : Unit = consumer.instance("ABBR", { ABBR(attributesMapOf("class", classes), consumer) }).visit(block)

fun PhrasingContent.area(shape : AreaShape? = null, alt : String? = null, classes : String? = null, block : AREA.() -> Unit = {}) : Unit = consumer.instance("AREA", { AREA(attributesMapOf("Shape", shape?.enumEncode(),"alt", alt,"class", classes), consumer) }).visit(block)
fun PhrasingContent.rectArea(alt : String? = null, classes : String? = null, block : AREA.() -> Unit = {}) : Unit = AREA(attributesMapOf("Shape", AreaShape.rect.realValue,"alt", alt,"class", classes), consumer).visit(block)
fun PhrasingContent.circleArea(alt : String? = null, classes : String? = null, block : AREA.() -> Unit = {}) : Unit = AREA(attributesMapOf("Shape", AreaShape.circle.realValue,"alt", alt,"class", classes), consumer).visit(block)
fun PhrasingContent.polyArea(alt : String? = null, classes : String? = null, block : AREA.() -> Unit = {}) : Unit = AREA(attributesMapOf("Shape", AreaShape.poly.realValue,"alt", alt,"class", classes), consumer).visit(block)
fun PhrasingContent.defaultArea(alt : String? = null, classes : String? = null, block : AREA.() -> Unit = {}) : Unit = AREA(attributesMapOf("Shape", AreaShape.default.realValue,"alt", alt,"class", classes), consumer).visit(block)

fun PhrasingContent.audio(classes : String? = null, block : AUDIO.() -> Unit = {}) : Unit = consumer.instance("AUDIO", { AUDIO(attributesMapOf("class", classes), consumer) }).visit(block)

fun PhrasingContent.b(classes : String? = null, block : B.() -> Unit = {}) : Unit = consumer.instance("B", { B(attributesMapOf("class", classes), consumer) }).visit(block)

fun PhrasingContent.bdi(classes : String? = null, block : BDI.() -> Unit = {}) : Unit = consumer.instance("BDI", { BDI(attributesMapOf("class", classes), consumer) }).visit(block)

fun PhrasingContent.bdo(classes : String? = null, block : BDO.() -> Unit = {}) : Unit = consumer.instance("BDO", { BDO(attributesMapOf("class", classes), consumer) }).visit(block)

fun PhrasingContent.br(classes : String? = null, block : BR.() -> Unit = {}) : Unit = consumer.instance("BR", { BR(attributesMapOf("class", classes), consumer) }).visit(block)

fun PhrasingContent.button(formEncType : ButtonFormEncType? = null, formMethod : ButtonFormMethod? = null, type : ButtonType? = null, classes : String? = null, block : BUTTON.() -> Unit = {}) : Unit = consumer.instance("BUTTON", { BUTTON(attributesMapOf("formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"type", type?.enumEncode(),"class", classes), consumer) }).visit(block)
fun PhrasingContent.getButton(formEncType : ButtonFormEncType? = null, type : ButtonType? = null, classes : String? = null, block : BUTTON.() -> Unit = {}) : Unit = BUTTON(attributesMapOf("formenctype", formEncType?.enumEncode(),"formmethod", ButtonFormMethod.get.realValue,"type", type?.enumEncode(),"class", classes), consumer).visit(block)
fun PhrasingContent.postButton(formEncType : ButtonFormEncType? = null, type : ButtonType? = null, classes : String? = null, block : BUTTON.() -> Unit = {}) : Unit = BUTTON(attributesMapOf("formenctype", formEncType?.enumEncode(),"formmethod", ButtonFormMethod.post.realValue,"type", type?.enumEncode(),"class", classes), consumer).visit(block)
fun PhrasingContent.putButton(formEncType : ButtonFormEncType? = null, type : ButtonType? = null, classes : String? = null, block : BUTTON.() -> Unit = {}) : Unit = BUTTON(attributesMapOf("formenctype", formEncType?.enumEncode(),"formmethod", ButtonFormMethod.put.realValue,"type", type?.enumEncode(),"class", classes), consumer).visit(block)
fun PhrasingContent.deleteButton(formEncType : ButtonFormEncType? = null, type : ButtonType? = null, classes : String? = null, block : BUTTON.() -> Unit = {}) : Unit = BUTTON(attributesMapOf("formenctype", formEncType?.enumEncode(),"formmethod", ButtonFormMethod.delete.realValue,"type", type?.enumEncode(),"class", classes), consumer).visit(block)

fun PhrasingContent.canvas(classes : String? = null, block : CANVAS.() -> Unit = {}) : Unit = consumer.instance("CANVAS", { CANVAS(attributesMapOf("class", classes), consumer) }).visit(block)
fun PhrasingContent.canvas(classes : String? = null, content : String = "") : Unit = consumer.instance("CANVAS", { CANVAS(attributesMapOf("class", classes), consumer) }).visit({+content})

fun PhrasingContent.cite(classes : String? = null, block : CITE.() -> Unit = {}) : Unit = consumer.instance("CITE", { CITE(attributesMapOf("class", classes), consumer) }).visit(block)

fun PhrasingContent.code(classes : String? = null, block : CODE.() -> Unit = {}) : Unit = consumer.instance("CODE", { CODE(attributesMapOf("class", classes), consumer) }).visit(block)

fun PhrasingContent.command(type : CommandType? = null, classes : String? = null, block : COMMAND.() -> Unit = {}) : Unit = consumer.instance("COMMAND", { COMMAND(attributesMapOf("type", type?.enumEncode(),"class", classes), consumer) }).visit(block)
fun PhrasingContent.commandCommand(classes : String? = null, block : COMMAND.() -> Unit = {}) : Unit = COMMAND(attributesMapOf("type", CommandType.command.realValue,"class", classes), consumer).visit(block)
fun PhrasingContent.checkBoxCommand(classes : String? = null, block : COMMAND.() -> Unit = {}) : Unit = COMMAND(attributesMapOf("type", CommandType.checkBox.realValue,"class", classes), consumer).visit(block)
fun PhrasingContent.radioCommand(classes : String? = null, block : COMMAND.() -> Unit = {}) : Unit = COMMAND(attributesMapOf("type", CommandType.radio.realValue,"class", classes), consumer).visit(block)

fun PhrasingContent.dataList(classes : String? = null, block : DATALIST.() -> Unit = {}) : Unit = consumer.instance("DATALIST", { DATALIST(attributesMapOf("class", classes), consumer) }).visit(block)

fun PhrasingContent.del(classes : String? = null, block : DEL.() -> Unit = {}) : Unit = consumer.instance("DEL", { DEL(attributesMapOf("class", classes), consumer) }).visit(block)

fun PhrasingContent.dfn(classes : String? = null, block : DFN.() -> Unit = {}) : Unit = consumer.instance("DFN", { DFN(attributesMapOf("class", classes), consumer) }).visit(block)

fun PhrasingContent.em(classes : String? = null, block : EM.() -> Unit = {}) : Unit = consumer.instance("EM", { EM(attributesMapOf("class", classes), consumer) }).visit(block)

fun PhrasingContent.embed(classes : String? = null, block : EMBED.() -> Unit = {}) : Unit = consumer.instance("EMBED", { EMBED(attributesMapOf("class", classes), consumer) }).visit(block)

fun PhrasingContent.i(classes : String? = null, block : I.() -> Unit = {}) : Unit = consumer.instance("I", { I(attributesMapOf("class", classes), consumer) }).visit(block)

fun PhrasingContent.iframe(sandbox : IframeSandbox? = null, classes : String? = null, block : IFRAME.() -> Unit = {}) : Unit = consumer.instance("IFRAME", { IFRAME(attributesMapOf("sandbox", sandbox?.enumEncode(),"class", classes), consumer) }).visit(block)
fun PhrasingContent.iframe(sandbox : IframeSandbox? = null, classes : String? = null, content : String = "") : Unit = consumer.instance("IFRAME", { IFRAME(attributesMapOf("sandbox", sandbox?.enumEncode(),"class", classes), consumer) }).visit({+content})
fun PhrasingContent.allowSameOriginIframe(classes : String? = null, block : IFRAME.() -> Unit = {}) : Unit = IFRAME(attributesMapOf("sandbox", IframeSandbox.allowSameOrigin.realValue,"class", classes), consumer).visit(block)
fun PhrasingContent.allowFormSIframe(classes : String? = null, block : IFRAME.() -> Unit = {}) : Unit = IFRAME(attributesMapOf("sandbox", IframeSandbox.allowFormS.realValue,"class", classes), consumer).visit(block)
fun PhrasingContent.allowScriptsIframe(classes : String? = null, block : IFRAME.() -> Unit = {}) : Unit = IFRAME(attributesMapOf("sandbox", IframeSandbox.allowScripts.realValue,"class", classes), consumer).visit(block)
fun PhrasingContent.allowSameOriginIframe(classes : String? = null, content : String = "") : Unit = IFRAME(attributesMapOf("sandbox", IframeSandbox.allowSameOrigin.realValue,"class", classes), consumer).visit({+content})
fun PhrasingContent.allowFormSIframe(classes : String? = null, content : String = "") : Unit = IFRAME(attributesMapOf("sandbox", IframeSandbox.allowFormS.realValue,"class", classes), consumer).visit({+content})
fun PhrasingContent.allowScriptsIframe(classes : String? = null, content : String = "") : Unit = IFRAME(attributesMapOf("sandbox", IframeSandbox.allowScripts.realValue,"class", classes), consumer).visit({+content})

fun PhrasingContent.img(alt : String? = null, src : String? = null, classes : String? = null, block : IMG.() -> Unit = {}) : Unit = consumer.instance("IMG", { IMG(attributesMapOf("alt", alt,"src", src,"class", classes), consumer) }).visit(block)

fun PhrasingContent.input(type : InputType? = null, formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = consumer.instance("INPUT", { INPUT(attributesMapOf("type", type?.enumEncode(),"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer) }).visit(block)
fun PhrasingContent.buttonInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.button.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun PhrasingContent.checkBoxInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.checkBox.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun PhrasingContent.colorInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.color.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun PhrasingContent.dateInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.date.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun PhrasingContent.dateTimeInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.dateTime.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun PhrasingContent.dateTimeLocalInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.dateTimeLocal.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun PhrasingContent.emailInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.email.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun PhrasingContent.fileInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.file.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun PhrasingContent.hiddenInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.hidden.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun PhrasingContent.imageInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.image.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun PhrasingContent.monthInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.month.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun PhrasingContent.numberInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.number.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun PhrasingContent.passwordInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.password.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun PhrasingContent.radioInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.radio.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun PhrasingContent.rangeInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.range.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun PhrasingContent.resetInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.reset.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun PhrasingContent.searchInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.search.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun PhrasingContent.submitInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.submit.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun PhrasingContent.textInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.text.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun PhrasingContent.telInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.tel.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun PhrasingContent.timeInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.time.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun PhrasingContent.urlInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.url.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
fun PhrasingContent.weekInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.week.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)

fun PhrasingContent.ins(classes : String? = null, block : INS.() -> Unit = {}) : Unit = consumer.instance("INS", { INS(attributesMapOf("class", classes), consumer) }).visit(block)

fun PhrasingContent.kbd(classes : String? = null, block : KBD.() -> Unit = {}) : Unit = consumer.instance("KBD", { KBD(attributesMapOf("class", classes), consumer) }).visit(block)

fun PhrasingContent.keyGen(keyType : KeyGenKeyType? = null, classes : String? = null, block : KEYGEN.() -> Unit = {}) : Unit = consumer.instance("KEYGEN", { KEYGEN(attributesMapOf("keytype", keyType?.enumEncode(),"class", classes), consumer) }).visit(block)
fun PhrasingContent.rsaKeyGen(classes : String? = null, block : KEYGEN.() -> Unit = {}) : Unit = KEYGEN(attributesMapOf("keytype", KeyGenKeyType.rsa.realValue,"class", classes), consumer).visit(block)

fun PhrasingContent.label(classes : String? = null, block : LABEL.() -> Unit = {}) : Unit = consumer.instance("LABEL", { LABEL(attributesMapOf("class", classes), consumer) }).visit(block)

fun PhrasingContent.link(href : String? = null, rel : String? = null, type : String? = null, block : LINK.() -> Unit = {}) : Unit = consumer.instance("LINK", { LINK(attributesMapOf("href", href,"rel", rel,"type", type), consumer) }).visit(block)

fun PhrasingContent.map(name : String? = null, classes : String? = null, block : MAP.() -> Unit = {}) : Unit = consumer.instance("MAP", { MAP(attributesMapOf("name", name,"class", classes), consumer) }).visit(block)

fun PhrasingContent.mark(classes : String? = null, block : MARK.() -> Unit = {}) : Unit = consumer.instance("MARK", { MARK(attributesMapOf("class", classes), consumer) }).visit(block)

fun PhrasingContent.math(classes : String? = null, block : MATH.() -> Unit = {}) : Unit = consumer.instance("MATH", { MATH(attributesMapOf("class", classes), consumer) }).visit(block)

fun PhrasingContent.meta(name : String? = null, content : String? = null, block : META.() -> Unit = {}) : Unit = consumer.instance("META", { META(attributesMapOf("name", name,"content", content), consumer) }).visit(block)

fun PhrasingContent.meter(classes : String? = null, block : METER.() -> Unit = {}) : Unit = consumer.instance("METER", { METER(attributesMapOf("class", classes), consumer) }).visit(block)

fun PhrasingContent.noScript(classes : String? = null, block : NOSCRIPT.() -> Unit = {}) : Unit = consumer.instance("NOSCRIPT", { NOSCRIPT(attributesMapOf("class", classes), consumer) }).visit(block)

fun PhrasingContent.object_(classes : String? = null, block : OBJECT_.() -> Unit = {}) : Unit = consumer.instance("OBJECT_", { OBJECT_(attributesMapOf("class", classes), consumer) }).visit(block)

fun PhrasingContent.output(classes : String? = null, block : OUTPUT.() -> Unit = {}) : Unit = consumer.instance("OUTPUT", { OUTPUT(attributesMapOf("class", classes), consumer) }).visit(block)

fun PhrasingContent.progress(classes : String? = null, block : PROGRESS.() -> Unit = {}) : Unit = consumer.instance("PROGRESS", { PROGRESS(attributesMapOf("class", classes), consumer) }).visit(block)

fun PhrasingContent.q(classes : String? = null, block : Q.() -> Unit = {}) : Unit = consumer.instance("Q", { Q(attributesMapOf("class", classes), consumer) }).visit(block)

fun PhrasingContent.ruby(classes : String? = null, block : RUBY.() -> Unit = {}) : Unit = consumer.instance("RUBY", { RUBY(attributesMapOf("class", classes), consumer) }).visit(block)

fun PhrasingContent.samp(classes : String? = null, block : SAMP.() -> Unit = {}) : Unit = consumer.instance("SAMP", { SAMP(attributesMapOf("class", classes), consumer) }).visit(block)

fun PhrasingContent.script(type : ScriptType? = null, src : String? = null, block : SCRIPT.() -> Unit = {}) : Unit = consumer.instance("SCRIPT", { SCRIPT(attributesMapOf("type", type?.enumEncode(),"src", src), consumer) }).visit(block)
fun PhrasingContent.textEcmaScriptScript(src : String? = null, block : SCRIPT.() -> Unit = {}) : Unit = SCRIPT(attributesMapOf("type", ScriptType.textEcmaScript.realValue,"src", src), consumer).visit(block)
fun PhrasingContent.textJavaScriptScript(src : String? = null, block : SCRIPT.() -> Unit = {}) : Unit = SCRIPT(attributesMapOf("type", ScriptType.textJavaScript.realValue,"src", src), consumer).visit(block)
fun PhrasingContent.textJavaScript10Script(src : String? = null, block : SCRIPT.() -> Unit = {}) : Unit = SCRIPT(attributesMapOf("type", ScriptType.textJavaScript10.realValue,"src", src), consumer).visit(block)
fun PhrasingContent.textJavaScript11Script(src : String? = null, block : SCRIPT.() -> Unit = {}) : Unit = SCRIPT(attributesMapOf("type", ScriptType.textJavaScript11.realValue,"src", src), consumer).visit(block)
fun PhrasingContent.textJavaScript12Script(src : String? = null, block : SCRIPT.() -> Unit = {}) : Unit = SCRIPT(attributesMapOf("type", ScriptType.textJavaScript12.realValue,"src", src), consumer).visit(block)
fun PhrasingContent.textJavaScript13Script(src : String? = null, block : SCRIPT.() -> Unit = {}) : Unit = SCRIPT(attributesMapOf("type", ScriptType.textJavaScript13.realValue,"src", src), consumer).visit(block)
fun PhrasingContent.textJavaScript14Script(src : String? = null, block : SCRIPT.() -> Unit = {}) : Unit = SCRIPT(attributesMapOf("type", ScriptType.textJavaScript14.realValue,"src", src), consumer).visit(block)
fun PhrasingContent.textJavaScript15Script(src : String? = null, block : SCRIPT.() -> Unit = {}) : Unit = SCRIPT(attributesMapOf("type", ScriptType.textJavaScript15.realValue,"src", src), consumer).visit(block)
fun PhrasingContent.textJScriptScript(src : String? = null, block : SCRIPT.() -> Unit = {}) : Unit = SCRIPT(attributesMapOf("type", ScriptType.textJScript.realValue,"src", src), consumer).visit(block)
fun PhrasingContent.textXJavaScriptScript(src : String? = null, block : SCRIPT.() -> Unit = {}) : Unit = SCRIPT(attributesMapOf("type", ScriptType.textXJavaScript.realValue,"src", src), consumer).visit(block)
fun PhrasingContent.textXEcmaScriptScript(src : String? = null, block : SCRIPT.() -> Unit = {}) : Unit = SCRIPT(attributesMapOf("type", ScriptType.textXEcmaScript.realValue,"src", src), consumer).visit(block)
fun PhrasingContent.textVbScriptScript(src : String? = null, block : SCRIPT.() -> Unit = {}) : Unit = SCRIPT(attributesMapOf("type", ScriptType.textVbScript.realValue,"src", src), consumer).visit(block)

fun PhrasingContent.select(classes : String? = null, block : SELECT.() -> Unit = {}) : Unit = consumer.instance("SELECT", { SELECT(attributesMapOf("class", classes), consumer) }).visit(block)

fun PhrasingContent.small(classes : String? = null, block : SMALL.() -> Unit = {}) : Unit = consumer.instance("SMALL", { SMALL(attributesMapOf("class", classes), consumer) }).visit(block)

fun PhrasingContent.span(classes : String? = null, block : SPAN.() -> Unit = {}) : Unit = consumer.instance("SPAN", { SPAN(attributesMapOf("class", classes), consumer) }).visit(block)

fun PhrasingContent.strong(classes : String? = null, block : STRONG.() -> Unit = {}) : Unit = consumer.instance("STRONG", { STRONG(attributesMapOf("class", classes), consumer) }).visit(block)

fun PhrasingContent.sub(classes : String? = null, block : SUB.() -> Unit = {}) : Unit = consumer.instance("SUB", { SUB(attributesMapOf("class", classes), consumer) }).visit(block)

fun PhrasingContent.sup(classes : String? = null, block : SUP.() -> Unit = {}) : Unit = consumer.instance("SUP", { SUP(attributesMapOf("class", classes), consumer) }).visit(block)

fun PhrasingContent.svg(classes : String? = null, block : SVG.() -> Unit = {}) : Unit = consumer.instance("SVG", { SVG(attributesMapOf("class", classes), consumer) }).visit(block)
fun PhrasingContent.svg(classes : String? = null, content : String = "") : Unit = consumer.instance("SVG", { SVG(attributesMapOf("class", classes), consumer) }).visit({+content})

fun PhrasingContent.textArea(rows : String? = null, cols : String? = null, wrap : TextAreaWrap? = null, classes : String? = null, block : TEXTAREA.() -> Unit = {}) : Unit = consumer.instance("TEXTAREA", { TEXTAREA(attributesMapOf("rows", rows,"cols", cols,"wrap", wrap?.enumEncode(),"class", classes), consumer) }).visit(block)
fun PhrasingContent.textArea(rows : String? = null, cols : String? = null, wrap : TextAreaWrap? = null, classes : String? = null, content : String = "") : Unit = consumer.instance("TEXTAREA", { TEXTAREA(attributesMapOf("rows", rows,"cols", cols,"wrap", wrap?.enumEncode(),"class", classes), consumer) }).visit({+content})
fun PhrasingContent.hardTextArea(rows : String? = null, cols : String? = null, classes : String? = null, block : TEXTAREA.() -> Unit = {}) : Unit = TEXTAREA(attributesMapOf("rows", rows,"cols", cols,"wrap", TextAreaWrap.hard.realValue,"class", classes), consumer).visit(block)
fun PhrasingContent.softTextArea(rows : String? = null, cols : String? = null, classes : String? = null, block : TEXTAREA.() -> Unit = {}) : Unit = TEXTAREA(attributesMapOf("rows", rows,"cols", cols,"wrap", TextAreaWrap.soft.realValue,"class", classes), consumer).visit(block)
fun PhrasingContent.hardTextArea(rows : String? = null, cols : String? = null, classes : String? = null, content : String = "") : Unit = TEXTAREA(attributesMapOf("rows", rows,"cols", cols,"wrap", TextAreaWrap.hard.realValue,"class", classes), consumer).visit({+content})
fun PhrasingContent.softTextArea(rows : String? = null, cols : String? = null, classes : String? = null, content : String = "") : Unit = TEXTAREA(attributesMapOf("rows", rows,"cols", cols,"wrap", TextAreaWrap.soft.realValue,"class", classes), consumer).visit({+content})

fun PhrasingContent.time(classes : String? = null, block : TIME.() -> Unit = {}) : Unit = consumer.instance("TIME", { TIME(attributesMapOf("class", classes), consumer) }).visit(block)

fun PhrasingContent.var_(classes : String? = null, block : VAR_.() -> Unit = {}) : Unit = consumer.instance("VAR_", { VAR_(attributesMapOf("class", classes), consumer) }).visit(block)

fun PhrasingContent.video(classes : String? = null, block : VIDEO.() -> Unit = {}) : Unit = consumer.instance("VIDEO", { VIDEO(attributesMapOf("class", classes), consumer) }).visit(block)

fun SectioningContent.article(classes : String? = null, block : ARTICLE.() -> Unit = {}) : Unit = consumer.instance("ARTICLE", { ARTICLE(attributesMapOf("class", classes), consumer) }).visit(block)

fun SectioningContent.aside(classes : String? = null, block : ASIDE.() -> Unit = {}) : Unit = consumer.instance("ASIDE", { ASIDE(attributesMapOf("class", classes), consumer) }).visit(block)

fun SectioningContent.nav(classes : String? = null, block : NAV.() -> Unit = {}) : Unit = consumer.instance("NAV", { NAV(attributesMapOf("class", classes), consumer) }).visit(block)

fun SectioningContent.section(classes : String? = null, block : SECTION.() -> Unit = {}) : Unit = consumer.instance("SECTION", { SECTION(attributesMapOf("class", classes), consumer) }).visit(block)

